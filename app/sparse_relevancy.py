import pandas as pd
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


nlp = spacy.load("en_core_web_sm")


class SparseSimilarity:

    def __init__(self, data):
        self.data = data

    def remove_stop_words(self, text):
        """
        Removes stopwords from the text
        :param text: the text to process
        :return:
        """
        doc = nlp(text)
        filtered_words = [token.text for token in doc if token.ent_type_ or not token.is_stop]
        return ' '.join(filtered_words)

    def tfidf_similarity(self, data_theme):
        """
        It calculates the cosine similarity between document pairs using vectors
        generated by TF-IDF.
        :param data_theme: A DataFrame with news article from a specific news theme
        (e.g., entertainment)
        :return:
        """
        vectorizer = TfidfVectorizer(max_features = 2000)
        tfidf_matrix = vectorizer.fit_transform(data_theme['clean_content'])
        cosine_sim_matrix = cosine_similarity(tfidf_matrix)
        return cosine_sim_matrix

    def sparse_cosine_similarity(self):
        """
        Calculates the cosine similarity between all document pairs within the same news
        topic using vectors generated by TF-IDF.
        :return: A dictionary with the cosine similarity information.
        """
        sparse_cos_similarity = {}
        unique_themes = list(self.data['theme'].unique())
        self.data['clean_content'] = self.data['content'].apply(self.remove_stop_words)
        for theme in unique_themes:
            data_theme = self.data[self.data['theme'] == theme]
            cosine_sim_matrix = self.tfidf_similarity(data_theme)
            cosine_sim_df = pd.DataFrame(cosine_sim_matrix, index = data_theme['file_index'],
                                         columns = data_theme['file_index'])
            sparse_cos_similarity[theme] = cosine_sim_df
        return sparse_cos_similarity








